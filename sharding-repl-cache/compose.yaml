services:
  #сервер конфигурации
  mongoConfigSrv:
    image: mongo:latest # docker образ
    container_name: mongoConfigSrv 
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - ./scripts:/scripts
      - config-data:/data/db
    command:
      [
        "--configsvr",
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ] 
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #1-й шард 
  shard1-a:
    image: mongo:latest
    container_name: shard1-a-node
    restart: always
    ports:
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.9
    volumes:
      - ./scripts:/scripts
      - shard1-a-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')", "--port" , "27018"]
      interval: 5s
      start_period: 10s

  shard1-b:
    image: mongo:latest
    container_name: shard1-b-node
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.8
    volumes:
      - ./scripts:/scripts
      - shard1-b-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')", "--port" , "27019"]
      interval: 5s
      start_period: 10s

  #2-й шард 
  shard2-a-node:
    image: mongo:latest
    container_name: shard2-a-node
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    volumes:
      - ./scripts:/scripts
      - shard2-a-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')", "--port" , "27020" ]
      interval: 5s
      start_period: 10s

  shard2-b-node:
    image: mongo:latest
    container_name: shard2-b-node
    restart: always
    ports:
      - "27021:27021"
    networks:
      app-network:
        ipv4_address: 173.17.0.6
    volumes:
      - ./scripts:/scripts
      - shard2-b-data:/data/db
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27021"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')", "--port" , "27021" ]
      interval: 5s
      start_period: 10s
  
  #роутер
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27022:27022"
    networks:
      app-network:
        ipv4_address: 173.17.0.5
    volumes:
      - ./scripts:/scripts
    command:
      [
        "mongos",
        "--configdb", 
        "config_server/mongoConfigSrv:27017",
        "--bind_ip_all",
        "--port",
        "27022"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
  
  redis:
   image: redis:latest
   container_name: redis
   restart: always
   ports:
     - "6379:6379"
   networks:
      app-network:


  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    networks:
      app-network:
    depends_on:
      - mongos_router
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://mongos_router:27022"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis:6379" 

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config-data:
  shard1-a-data:
  shard1-b-data:
  shard2-a-data:
  shard2-b-data:
